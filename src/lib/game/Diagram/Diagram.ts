import { makeObservable, observable, action, computed } from "mobx";

import { EDiagramCellState, SpinIndex } from "../ChemicalElement/DiagramCell";
import ElemConfig from "../ChemicalElement/ElemConfig";
import PeriodicTableInterface from "../ChemicalElement/PeriodicTableInterface";

import type { CellQN, ShipQN } from "../ChemicalElement/QuantumNumbers";
import IDiagram, { DiagramEvent, DiagramEventData, QNStringScheme } from "./DiagramInterface";
import EventProvider from "../../util/EventEmitter/EventProvider";



/**
 * **–î–∏–∞–≥—Ä–∞–º–º–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞**
 * 
 * * –°–æ–¥–µ—Ä–∂–∏—Ç *—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞* –∏–∑ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã
 * * –í—ã—Å—Ç—É–ø–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ *–∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è*
 * * –ò–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –º–µ–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –∏–ª–∏ –∑–∞–¥–∞–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ü–µ–ª–∏–∫–æ–º
 * * –ò–∑–º–µ–Ω—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É, –ø–µ—Ä–µ–∫–ª—é—á–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫ –∏–ª–∏ –±–ª–æ–∫–æ–≤ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
 * * –ü–∞—Ä–∞–º–µ—Ç—Ä `disabled` –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (üé≤)
 * * –û–ø–æ–≤–µ—â–∞–µ—Ç –æ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π
 */
class Diagram extends EventProvider<DiagramEvent, DiagramEventData> implements IDiagram {
	readonly periodicTable: PeriodicTableInterface;
	_state!: ElemConfig;
	_shots!: ElemConfig;
	_lastShotIndex?: SpinIndex;
	_disabled: boolean; // TODO: rename diagram.disabled => .editable


	// private static readonly SIZE: number = 118;


	constructor(periodicTable: PeriodicTableInterface) {
		super();
		makeObservable(this, {

			_state: observable,
			_shots: observable,
			_disabled: observable,

			disabled: computed,
			setElementByNumber: action,
			setCellState: action,
			toggleCell: action,
			toggleShip: action,
			aim: action,
			reset: action,
		});

		this.periodicTable = periodicTable;
		this.reset();
		this._disabled = false;
	}

	getCellState( quantumNumbers: CellQN ): EDiagramCellState
	{
		const index = this._getCellIndex( quantumNumbers );
		return index
				? ElemConfig.getCellState( index,
										this._state,
										this._shots )
				: EDiagramCellState.off;
	}

	private _getCellIndex( quantumNumbers: CellQN ): SpinIndex | undefined
	{
		return this.periodicTable.converter.getCellIndex( quantumNumbers );
	}


	setCellState( quantumNumbers: CellQN, state: boolean ): void
	{
		const index = this._getCellIndex( quantumNumbers );
		if( !index )
			return;

		if( this._state.hasSpin( index ) !== state )
		{
			this._state.write( index, state );
			this._emit( 'changed', {
				type: 'cell',
				index: index.value,
				qn: quantumNumbers,
			});
		}
		
	}

	isLastShot( quantumNumbers: CellQN ): boolean
	{
		const index = this._getCellIndex( quantumNumbers );
		return this._lastShotIndex !== undefined
				&& index !== undefined
				&& this._lastShotIndex.value === index.value;
	}

	setElementByNumber( number: number ): void
	{
		const element = this.periodicTable.getByNumber( number );
		this._state = element.config.clone();
	}

	get disabled(): boolean
	{
		return this._disabled;
	}

	set disabled( disable: boolean )
	{
		this._disabled = disable;
		this._emit( disable ? 'disabled' : 'enabled' );
	}

	toggleCell( quantumNumbers: CellQN ): void
	{
		if( this._disabled )
			return;

		const index = this._getCellIndex( quantumNumbers );
		if( !index )
			return;

		this._state.write( index, !this._state.hasSpin( index ) );
		this._emit( 'changed', {
			type: 'cell',
			index: index.value,
			qn: quantumNumbers,
		} )
	}

	toggleShip( quantumNumbers: ShipQN ): void
	{
		if( this._disabled )
			return;

		const ship = this.periodicTable.converter.getBlockIndexes( quantumNumbers );
		if( !ship )
			return;

		if( this._isShipFilled( ship ) )
			this._clearShip( ship );
		else
			this._fillShip( ship );

		this._emit( 'changed', {
			type: 'ship',
			qn: quantumNumbers,
		} )
	}

	private _isShipFilled( ship: SpinIndex[] ): boolean
	{
		for (let i = 0; i < ship.length; i++) {
			if( !this._state.hasSpin( ship[i] ) )
				return false;
		}
		return true;
	}
	
	private _clearShip( ship: SpinIndex[] ): void
	{
		for( const index of ship ) {
			this._state.writeWithoutUpdate( index, false );
		}
		this._state.update();
	}
	
	private _fillShip( ship: SpinIndex[] ): void
	{
		for( const index of ship ) {
			this._state.writeWithoutUpdate( index, true );
		}
		this._state.update();
	}

	aim( quantumNumbers: CellQN ): void
	{
		if( this._disabled )
			return;

		const index = this._getCellIndex( quantumNumbers );
		if( !index )
			return;

		if( this._shots.hasSpin( index ) )
		{
			this._emit( 'shot', {
				index: index.value,
				qn: quantumNumbers,
				isReShot: true,
			});
		}
		else {
			this._shots.write( index, true );
			this._emit( 'shot', {
				index: index.value,
				qn: quantumNumbers,
				isReShot: false,
			});
		}
	}

	setState(): void {
		throw new Error("Method not implemented.");
	}

	reset(): void
	{
		this._state = new ElemConfig();
		this._shots = new ElemConfig();
		this._lastShotIndex = undefined;
	}

	highlight( quantumNumbers: QNStringScheme ): void
	{
		/* FIXME: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ */
	}
}



export default Diagram;